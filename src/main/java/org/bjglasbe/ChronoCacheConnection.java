package org.bjglasbe;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;

import java.util.concurrent.Executor;
import java.util.Map;
import java.util.Properties;

public class ChronoCacheConnection implements Connection {

    public ChronoCacheConnection() {
    }

    @Override
    public void abort( Executor executor ) {
    }

    @Override
    public void clearWarnings() {
    }

    @Override
    public void close() {
    }

    @Override
    public void commit() {
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) {
        throw new UnsupportedOperationException();
    }

    @Override
    public Blob createBlob() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Clob createClob() {
        throw new UnsupportedOperationException();
    }

    @Override
    public NClob createNClob() {
        throw new UnsupportedOperationException();
    }

    @Override
    public SQLXML createSQLXML() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Statement createStatement() {
        //FIXME
        return null;
    }

    @Override
    public Statement createStatement(
        int resultSetType,
        int resultSetConcurrency
    ) {
        //FIXME
        return null;
    }

    @Override
    public Statement createStatement(
        int resultSetType,
        int resultSetConcurrency,
        int resultSetHoldability
    ) {
        return null;
    }
    
    @Override
    public Struct createStruct( String typeName, Object[] attributes ) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean getAutoCommit() {
        return true;
    }

    @Override
    public String getCatalog() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Properties getClientInfo() {
        throw new UnsupportedOperationException();
    }

    @Override
    public String getClientInfo(String name) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getHoldability() {
        throw new UnsupportedOperationException();
    }

    @Override
    public DatabaseMetaData getMetaData() {
        throw new UnsupportedOperationException(); 
    }

    @Override
    public int getNetworkTimeout() {
        //FIXME?
        return -1;
    }
    @Override
    public String getSchema() {
        throw new UnsupportedOperationException();
    }
    @Override
    public int getTransactionIsolation() {
        //SNAPSHOT ISOLATION
        throw new UnsupportedOperationException();
    }

    @Override
    public Map<String,Class<?>> getTypeMap() {
        throw new UnsupportedOperationException(); 
    }

    @Override
    public SQLWarning getWarnings() {
        throw new UnsupportedOperationException();
    }
    @Override
    public boolean isClosed() {
        return false;
    }
    @Override
    public boolean isReadOnly() {
        return false;
    }
    @Override
    public boolean isValid(int timeout) {
        return true;
    }
    @Override
    public String nativeSQL(String sql) {
        return sql;
    }
    @Override
    public CallableStatement prepareCall(String sql) {
        throw new UnsupportedOperationException();
    }
    @Override
    public CallableStatement prepareCall(
        String sql,
        int resultSetType,
        int resultSetConcurrency
    ) {
        throw new UnsupportedOperationException();
    }
    @Override
    public CallableStatement prepareCall(
        String sql,
        int resultSetType,
        int resultSetConcurrency,
        int resultSetHoldability
    ) {
        throw new UnsupportedOperationException();
    }
    @Override
    public PreparedStatement prepareStatement(String sql) {
        throw new UnsupportedOperationException();
    }
    @Override
    public PreparedStatement prepareStatement(
        String sql,
        int autoGeneratedKeys
    ) {
        throw new UnsupportedOperationException();
    }
    @Override 
    public PreparedStatement prepareStatement(
        String sql,
        int[] columnIndexes
    ) {
        throw new UnsupportedOperationException();
    }
    @Override
    public PreparedStatement prepareStatement(
        String sql,
        int resultSetType,
        int resultSetConcurrency
    ) {
        throw new UnsupportedOperationException();
    }

    @Override
    public PreparedStatement prepareStatement(
        String sql,
        int resultSetType,
        int resultSetConcurrency,
        int resultSetHoldability
    ) {
        throw new UnsupportedOperationException();
    }

    @Override 
    public PreparedStatement prepareStatement(
        String sql, 
        String[] columnNames 
    ) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void releaseSavepoint(Savepoint savepoint) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void rollback() {
        throw new UnsupportedOperationException();
    }
    @Override
    public void rollback(Savepoint savepoint) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void setAutoCommit(boolean autoCommit) {
        if( autoCommit != true ) {
            throw new UnsupportedOperationException();
        }
    }
    @Override
    public void setCatalog(String catalog) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void setClientInfo(Properties properties) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void setClientInfo(String name, String value) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void setHoldability(int holdability) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void setReadOnly( boolean readOnly ) {
        throw new UnsupportedOperationException();
    }
    
    @Override
    public Savepoint setSavepoint() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Savepoint setSavepoint( String name ) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setSchema( String schema ) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setTransactionIsolation( int level ) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setTypeMap( Map<String,Class<?>> map ) {
        throw new UnsupportedOperationException();
    }

    @Override
    public <T> T unwrap(Class<T> iface ) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isWrapperFor( Class<?> iface ) throws SQLException {
        return false;
    }
}
